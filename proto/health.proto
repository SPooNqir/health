syntax = "proto3";

package v1;

option go_package = ".;v1";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Spoon - Robot Health WS";
		version: "0.0.1";
		contact: {
			name: "Spoon Cloud Team";
			url: "https://gitlab.com/SpoonQIR/Cloud/services/robot-health";
			email: "sebastien.lavayssiere@spoon.ai";
		};
	};
	// Overwriting host entry breaks tests, so this is not done here.
	external_docs: {
		url: "https://gitlab.com/SpoonQIR/Cloud/services/robot-health";
		description: "link for docs";
	}
	schemes: HTTPS;
	schemes: HTTP;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "ApiKeyAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "Authorization";
			}
		}
	}
	security: {
		security_requirement: {
			key: "ApiKeyAuth";
			value: {};
		}
	}
	responses: {
		key: "403";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
		}
	}
	responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
	responses: {
		key: "418";
		value: {
			description: "I'm a teapot.";
			schema: {
				json_schema: {
					ref: ".grpc.gateway.examples.internal.proto.examplepb.NumericEnum";
				}
			}
		}
	}
};

message Health {
	string email = 1;
	string datatype = 2;
	google.protobuf.Timestamp lastData = 3;
	bool testActivity = 4;
	bool testConnected = 5;
	bool error = 6;
}

message Logs {
	string email = 1;
	repeated string logs = 2;
}

service health {
	rpc Get (Health) returns (Health) {
		option (google.api.http) = {
			get: "/v1/robots/health"
		};
	}

	rpc GetLogs (Logs) returns (Logs) {
		option (google.api.http) = {
			get: "/v1/robots/health/logs"
		};
	}
}
